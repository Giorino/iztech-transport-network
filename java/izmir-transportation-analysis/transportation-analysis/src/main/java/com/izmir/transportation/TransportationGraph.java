package com.izmir.transportation;

import java.awt.Color;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.geotools.data.DataUtilities;
import org.geotools.feature.DefaultFeatureCollection;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.map.FeatureLayer;
import org.geotools.map.Layer;
import org.geotools.map.MapContent;
import org.geotools.referencing.crs.DefaultGeographicCRS;
import org.geotools.styling.SLD;
import org.geotools.styling.Style;
import org.geotools.swing.JMapFrame;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleWeightedGraph;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Point;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;

/**
 * A class that models the Izmir transportation network as a weighted graph structure.
 * This class integrates with IzmirBayGraph's point generation and CreateRoadNetwork's path calculations
 * to create a comprehensive graph representation of the transportation network.
 * 
 * The graph uses JGraphT's SimpleWeightedGraph with Point vertices and DefaultWeightedEdge edges,
 * where edge weights represent actual path distances calculated from the road network.
 * 
 * @author yagizugurveren
 */
public class TransportationGraph {
    private final Graph<Point, DefaultWeightedEdge> graph;
    private final Map<Point, Point> nodeMappings;
    private final GeometryFactory geometryFactory;
    private static final double MIN_EDGE_WIDTH = 1.0;
    private static final double MAX_EDGE_WIDTH = 5.0;
    private static final double WEIGHT_SCALE_FACTOR = 0.001; // Convert meters to kilometers

    /**
     * Constructs a new TransportationGraph with the given points.
     * 
     * @param originalPoints List of points generated by IzmirBayGraph
     */
    public TransportationGraph(List<Point> originalPoints) {
        this.graph = new SimpleWeightedGraph<>(DefaultWeightedEdge.class);
        this.nodeMappings = new HashMap<>();
        this.geometryFactory = JTSFactoryFinder.getGeometryFactory();

        // Initialize graph with original points
        for (Point point : originalPoints) {
            graph.addVertex(point);
            nodeMappings.put(point, point); // Initially, map points to themselves
        }
    }

    /**
     * Updates the mapping between an original point and its corresponding network node.
     * 
     * @param originalPoint The original point from IzmirBayGraph
     * @param networkNode The corresponding node in the road network
     */
    public void updateNodeMapping(Point originalPoint, Point networkNode) {
        nodeMappings.put(originalPoint, networkNode);
    }

    /**
     * Adds a weighted connection between two points in the graph.
     * 
     * @param source The source point
     * @param target The target point
     * @param weight The weight (distance) of the connection
     * @return The created edge, or null if the connection couldn't be made
     */
    public DefaultWeightedEdge addConnection(Point source, Point target, double weight) {
        if (source == null || target == null || weight <= 0) {
            return null;
        }

        DefaultWeightedEdge edge = graph.addEdge(source, target);
        if (edge != null) {
            // Store weight in meters
            graph.setEdgeWeight(edge, weight);
        }
        return edge;
    }

    /**
     * Creates and displays a visualization of the transportation network graph.
     * The visualization shows nodes as red circles and edges as blue lines with
     * thickness proportional to their weights.
     */
    public void visualizeGraph() {
        try {
            // Create feature types for points and lines
            SimpleFeatureTypeBuilder pointBuilder = new SimpleFeatureTypeBuilder();
            pointBuilder.setName("Nodes");
            pointBuilder.setCRS(DefaultGeographicCRS.WGS84);
            pointBuilder.add("geometry", Point.class);
            pointBuilder.add("id", String.class);
            SimpleFeatureType pointType = pointBuilder.buildFeatureType();

            SimpleFeatureTypeBuilder lineBuilder = new SimpleFeatureTypeBuilder();
            lineBuilder.setName("Edges");
            lineBuilder.setCRS(DefaultGeographicCRS.WGS84);
            lineBuilder.add("geometry", LineString.class);
            lineBuilder.add("weight", Double.class);
            lineBuilder.add("label", String.class);  // Add label field for distance text
            SimpleFeatureType lineType = lineBuilder.buildFeatureType();

            // Create feature collections
            DefaultFeatureCollection nodes = new DefaultFeatureCollection();
            DefaultFeatureCollection edges = new DefaultFeatureCollection();

            // Add nodes to feature collection
            SimpleFeatureBuilder pointBuilder2 = new SimpleFeatureBuilder(pointType);
            for (Point point : graph.vertexSet()) {
                pointBuilder2.add(point);
                pointBuilder2.add(String.valueOf(point.hashCode()));
                SimpleFeature feature = pointBuilder2.buildFeature(null);
                nodes.add(feature);
            }

            // Add edges to feature collection
            SimpleFeatureBuilder lineBuilder2 = new SimpleFeatureBuilder(lineType);
            for (DefaultWeightedEdge edge : graph.edgeSet()) {
                Point source = graph.getEdgeSource(edge);
                Point target = graph.getEdgeTarget(edge);
                double weight = graph.getEdgeWeight(edge);

                LineString line = geometryFactory.createLineString(new Coordinate[]{
                    source.getCoordinate(),
                    target.getCoordinate()
                });

                // Format distance label in kilometers with one decimal place
                String distanceLabel = String.format("%.1f km", weight * 0.001); // Convert meters to kilometers

                lineBuilder2.add(line);
                lineBuilder2.add(weight);
                lineBuilder2.add(distanceLabel);
                SimpleFeature feature = lineBuilder2.buildFeature(null);
                edges.add(feature);
            }

            // Create styles
            Style nodeStyle = SLD.createPointStyle("circle", Color.BLACK, Color.RED, 1.0f, 7);
            
            // Create map layers
            Layer nodesLayer = new FeatureLayer(nodes, nodeStyle);
            
            // Create edge layers with varying line thickness based on weight
            MapContent map = new MapContent();
            map.setTitle("Izmir Transportation Network Graph");
            
            // Add edge layers with different weights and labels
            for (DefaultWeightedEdge edge : graph.edgeSet()) {
                Point source = graph.getEdgeSource(edge);
                Point target = graph.getEdgeTarget(edge);
                double weight = graph.getEdgeWeight(edge);
                
                // Calculate line width based on weight
                double normalizedWeight = Math.log1p(weight * WEIGHT_SCALE_FACTOR);
                float lineWidth = (float) (MIN_EDGE_WIDTH + 
                    (normalizedWeight / Math.log1p(getMaxWeight() * WEIGHT_SCALE_FACTOR)) * 
                    (MAX_EDGE_WIDTH - MIN_EDGE_WIDTH));
                
                // Create line geometry
                LineString line = geometryFactory.createLineString(new Coordinate[]{
                    source.getCoordinate(),
                    target.getCoordinate()
                });
                
                // Create edge feature with label
                SimpleFeatureType edgeType = DataUtilities.createType("Edge",
                    "geometry:LineString,weight:Double,label:String");
                SimpleFeatureBuilder edgeBuilder = new SimpleFeatureBuilder(edgeType);
                edgeBuilder.add(line);
                edgeBuilder.add(weight);
                edgeBuilder.add(String.format("%.1f km", weight * 0.001)); // Convert meters to kilometers
                
                DefaultFeatureCollection edgeCollection = new DefaultFeatureCollection();
                edgeCollection.add(edgeBuilder.buildFeature(null));
                
                // Create style with line and label
                org.geotools.styling.StyleBuilder styleBuilder = new org.geotools.styling.StyleBuilder();
                
                // Create line symbolizer
                org.geotools.styling.LineSymbolizer lineSymbolizer = styleBuilder.createLineSymbolizer(Color.LIGHT_GRAY, lineWidth);
                
                // Create text symbolizer for the label
                org.geotools.styling.TextSymbolizer textSymbolizer = styleBuilder.createTextSymbolizer();
                textSymbolizer.setLabel(styleBuilder.attributeExpression("label"));
                textSymbolizer.setFill(styleBuilder.createFill(Color.BLACK));
                textSymbolizer.setFont(styleBuilder.createFont("Arial", 12));
                
                // Create the final style with both symbolizers
                org.geotools.styling.Rule rule = styleBuilder.createRule(new org.geotools.styling.Symbolizer[]{
                    lineSymbolizer,
                    textSymbolizer
                });
                org.geotools.styling.FeatureTypeStyle fts = styleBuilder.createFeatureTypeStyle("Edge", rule);
                Style edgeStyle = styleBuilder.createStyle();
                edgeStyle.featureTypeStyles().add(fts);
                
                Layer edgeLayer = new FeatureLayer(edgeCollection, edgeStyle);
                map.addLayer(edgeLayer);
            }
            
            map.addLayer(nodesLayer);

            // Create and show the map frame
            JMapFrame mapFrame = new JMapFrame(map);
            mapFrame.enableToolBar(true);
            mapFrame.enableStatusBar(true);
            mapFrame.setSize(800, 600);
            mapFrame.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Gets the maximum edge weight in the graph.
     * 
     * @return The maximum weight, or 0 if the graph has no edges
     */
    private double getMaxWeight() {
        double maxWeight = 0.0;
        for (DefaultWeightedEdge edge : graph.edgeSet()) {
            maxWeight = Math.max(maxWeight, graph.getEdgeWeight(edge));
        }
        return maxWeight;
    }

    /**
     * Gets the underlying JGraphT graph structure.
     * 
     * @return The graph object
     */
    public Graph<Point, DefaultWeightedEdge> getGraph() {
        return graph;
    }

    /**
     * Gets the mapping between original points and their corresponding network nodes.
     * 
     * @return The node mapping
     */
    public Map<Point, Point> getNodeMappings() {
        return nodeMappings;
    }
} 